rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user documents
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow read for development purposes
      allow read: if true;
    }
    
    // Documents - users can read/write their own documents OR shared documents with edit permission
    match /documents/{documentId} {
      // Allow if user owns the document
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // For shared documents, we need to check if the user has permission through team membership
      // This is a simplified approach - in production, you might want more complex rules
      allow read, write: if request.auth != null;
      
      // More permissive for development - allow reading documents
      allow read: if true;
    }
    
    // Teams - lenient rules for team collaboration
    match /teams/{teamId} {
      // Allow all operations if user is authenticated (demo purposes)
      allow read, write, create, update, delete: if request.auth != null;
      // Allow read for development
      allow read: if true;
    }
    
    // Team invitations - lenient rules
    match /teamInvitations/{invitationId} {
      allow read, write, create, update, delete: if request.auth != null;
      // Allow read for development
      allow read: if true;
    }
    
    // Shared documents - lenient rules
    match /sharedDocuments/{sharedDocId} {
      allow read, write, create, update, delete: if request.auth != null;
      // Allow read for development
      allow read: if true;
    }
    
    // Document comments - lenient rules
    match /documentComments/{commentId} {
      allow read, write, create, update, delete: if request.auth != null;
      // Allow read for development
      allow read: if true;
    }
    
    // User profiles - more permissive for development
    match /profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow read and creation for development purposes
      allow read, create: if true;
      // Allow write if creating or if authenticated user matches
      allow write: if request.auth != null && (request.auth.uid == userId || !exists(/databases/$(database)/documents/profiles/$(userId)));
    }
  }
}